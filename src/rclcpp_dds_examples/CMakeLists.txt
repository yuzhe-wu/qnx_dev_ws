cmake_minimum_required(VERSION 3.5)
project(rclcpp_dds_examples)

# Default to C99
if(NOT CMAKE_C_STANDARD)
  set(CMAKE_C_STANDARD 99)
endif()

# Default to C++14
if(NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 14)
endif()

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# find dependencies
find_package(ament_cmake REQUIRED)
find_package(rclcpp_dds REQUIRED)

find_package(std_msgs REQUIRED)
find_package(sensor_msgs REQUIRED)
find_package(builtin_interfaces REQUIRED)

find_package(yaml-cpp REQUIRED)  # Ensure yaml-cpp is found
link_directories(/home/wayve/yuzhe/ros2_qnx_workspace/ros2/install/aarch64le/lib)

include_directories("/home/wayve/qnx710/target/qnx7/aarch64le/opt/ros/humble/include/console_bridge_vendor")

# Specify the paths for the metp library and headers
set(metp_INCLUDE_DIR "/home/wayve/rti_connext_dds-7.3.0/include/ndds/metp")
set(metp_LIBRARY "/home/wayve/rti_connext_dds-7.3.0/lib/armv8QNX7.1qcc_gpp8.3.0/libnddsmetp.so")

if(NOT TARGET RTIConnextDDS::metp)
    add_library(RTIConnextDDS::metp UNKNOWN IMPORTED)
    set_property(TARGET RTIConnextDDS::metp PROPERTY IMPORTED_LOCATION ${metp_LIBRARY})
    set_property(TARGET RTIConnextDDS::metp PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${metp_INCLUDE_DIR})
endif()

################################################################################
# Generate type supports with `rtiddsgen` from IDL files generated by ROS 2
# and build a library with all type supports.
# We also generate some type support from "standard" IDL files. In this case we
# use the syntax `<file>[@<prefix>]` to specify an optional prefix for the
# location where files will be generated (and that will be used to `#include`
# them in code, e.g. `#include "my/custom/prefix/Foo.hpp"`). This option is
# useful to use an "include policy" for type definition files that is consistent
# with the one used by ROS 2 in the automatically generated IDL files.
################################################################################
connext_generate_typesupport_library(${PROJECT_NAME}_types
  MESSAGES
    builtin_interfaces/Time
    std_msgs/String
    std_msgs/Header
    sensor_msgs/PointField
    sensor_msgs/PointCloud2
  IDLS
    idl/ShapeType.idl
    idl/camera/CameraCommon.idl@camera
    idl/camera/CameraCommonFlat.idl@camera
    idl/camera/CameraImage.idl@camera
    idl/camera/CameraImageFlat.idl@camera
    idl/camera/CameraImageFlatZc.idl@camera
    idl/camera/CameraImageZc.idl@camera
  ZEROCOPY
)

add_library(${PROJECT_NAME} SHARED
  src/camera/camera_pub_flat.cpp
  src/camera/camera_pub_flat_zc.cpp
  src/camera/camera_pub_plain.cpp
  src/camera/camera_pub_zc.cpp
  src/camera/camera_sub_flat.cpp
  src/camera/camera_sub_flat_zc.cpp
  src/camera/camera_sub_plain.cpp
  src/camera/camera_sub_zc.cpp
  src/chatter/talker.cpp
  src/chatter/listener.cpp
  src/ping/ping_string.cpp
  include/${PROJECT_NAME}/visibility_control.h
  include/${PROJECT_NAME}/ping/publisher.hpp
  include/${PROJECT_NAME}/ping/subscriber.hpp
  include/${PROJECT_NAME}/ping/tester.hpp
  include/${PROJECT_NAME}/camera/CameraImagePublisher.hpp
  include/${PROJECT_NAME}/camera/CameraImageSubscriber.hpp
)
target_compile_definitions(${PROJECT_NAME}
  PRIVATE "RCLCPP_DDS_EXAMPLES_BUILDING_DLL")
target_include_directories(${PROJECT_NAME}
  PUBLIC
    "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>"
    "$<INSTALL_INTERFACE:include>"
)
target_link_libraries(${PROJECT_NAME}
  ${PROJECT_NAME}_types
)
ament_target_dependencies(${PROJECT_NAME}
  rclcpp_dds
  rclcpp_components
)
# set_target_properties(${PROJECT_NAME}
#   PROPERTIES ENABLE_EXPORTS true)
install(TARGETS ${PROJECT_NAME}
  ARCHIVE DESTINATION lib
  LIBRARY DESTINATION lib
  RUNTIME DESTINATION bin)

connext_components_register_node(${PROJECT_NAME}
  PLUGIN "StringPingPublisher"
  EXECUTABLE ping_string_pub)

connext_components_register_node(${PROJECT_NAME}
  PLUGIN "StringPingSubscriber"
  EXECUTABLE ping_string_sub)

connext_components_register_node(${PROJECT_NAME}
  PLUGIN "rclcpp_dds_examples::DdsTalker"
  EXECUTABLE talker)

connext_components_register_node(${PROJECT_NAME}
  PLUGIN "rclcpp_dds_examples::DdsListener"
  EXECUTABLE listener)

connext_components_register_node(${PROJECT_NAME}
  PLUGIN "rclcpp_dds_examples::CameraImagePublisherPlain"
  EXECUTABLE camera_pub_plain)

connext_components_register_node(${PROJECT_NAME}
  PLUGIN "rclcpp_dds_examples::CameraImagePublisherFlat"
  EXECUTABLE camera_pub_flat)

connext_components_register_node(${PROJECT_NAME}
  PLUGIN "rclcpp_dds_examples::CameraImagePublisherFlatZc"
  EXECUTABLE camera_pub_flat_zc)

connext_components_register_node(${PROJECT_NAME}
  PLUGIN "rclcpp_dds_examples::CameraImagePublisherZc"
  EXECUTABLE camera_pub_zc)

connext_components_register_node(${PROJECT_NAME}
  PLUGIN "rclcpp_dds_examples::CameraImageSubscriberPlain"
  EXECUTABLE camera_sub_plain)

connext_components_register_node(${PROJECT_NAME}
  PLUGIN "rclcpp_dds_examples::CameraImageSubscriberFlat"
  EXECUTABLE camera_sub_flat)

connext_components_register_node(${PROJECT_NAME}
  PLUGIN "rclcpp_dds_examples::CameraImageSubscriberFlatZc"
  EXECUTABLE camera_sub_flat_zc)

connext_components_register_node(${PROJECT_NAME}
  PLUGIN "rclcpp_dds_examples::CameraImageSubscriberZc"
  EXECUTABLE camera_sub_zc)

connext_add_executable(
  NAME talker_main
  SOURCES
    src/chatter/talker_main.cpp
  LIBRARIES
    ${PROJECT_NAME}
)
connext_add_executable(
  NAME listener_main
  SOURCES
    src/chatter/listener_main.cpp
  LIBRARIES
    ${PROJECT_NAME}
)

if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  ament_lint_auto_find_test_dependencies()
endif()

ament_package()
